replicaCount: 1
# -- port caddy container and service is listening to
listenPort: &listenPort 8080

adminPort: &adminPort 2019

# -- manage https
https:
  # -- enable https ports. If true, ingress will point to the https port and not http one
  enabled: false
  # -- https port
  port: 443

image:
  repository: livcr.io/docker/caddy
  pullPolicy: IfNotPresent
  # if set, will be used as
  tagSuffix: "-alpine"
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations to add to the ConfigMap.
configMapAnnotations: {}

# -- Annotations to add to the Deployment.
deploymentAnnotations: {}

# -- Annotations to add to the Pod.
podAnnotations: {}

podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  # -- External traffic policy. Used only when `service.type` is LoadBalancer or Nodeport
  externalTrafficPolicy: Cluster
  annotations: {}

resources:
  limits:
    memory: 128Mi
  requests:
    cpu: 32m
    memory: 64Mi

env: []

extraEnvFrom: []

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 20
  targetCPUUtilizationPercentage: 60
  # targetMemoryUtilizationPercentage: 80
  annotations: {}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
        - type: Percent
          value: 40
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max

nodeSelector: {}

tolerations: []

affinity: {}

podDisruptionBudget:
  enabled: false
  maxUnavailable: 1

health:
  # -- Health check path
  path: /
  port: 9999

# -- define additional volumes
volumes: []
#  - name: certs
#    secret:
#      secretName: mycerts-secret
#      optional: false

# -- define additional volumeMounts
volumeMounts: []
#  - name: certs
#    mountPath: /certs
#    readonly: true
networkPolicy:
  enabled: true
structuredConfig:
  services: {}
#    bouncer: reverse_proxy bouncer:80
#    hydra: reverse_proxy hydra:80
#    nms: reverse_proxy nms:80
  routes: {}
#    auth:
#      - matchers:
#          path_regexp: ^/v[2-3]/(users|roles).*$
#          paths: []
#          methods: ["GET"]
#        name: bouncerAPIs
#        directives:
#          - invoke bouncer
# -- Caddy configuration
config:
  # -- if true, it will enable debugging
  debug: false
  metrics:
    enabled: false
  # -- config going to a global section. See https://caddyserver.com/docs/caddyfile/options for reference
  global: |
    auto_https off
    acme_ca https://acme-staging-v02.api.letsencrypt.org/directory
    log {
      output stdout
    }
  services: |
    {{- range $k, $v := .Values.structuredConfig.services }}
    &({{ $k }}) {
      {{ $v }}
    }    
    {{- end }}
  # -- this is a place to add your own configuration. It will be appended after the global section
  caddyFile: |
    (logging) {
      log {
        output stdout
        format json
      }
    }
    :{{ .Values.listenPort }} {
      import logging
      
      @catchAllAPI {
          path_regexp catchAllAPI ^.*$
      }

      {{- range  $componentName, $componentRoutes := .Values.structuredConfig.routes }}
      {{- range  $route := $componentRoutes }}
      
      @{{ $route.name }} {
        {{- if $route.matchers.path_regexp }}
          path_regexp {{ $route.name }} {{ $route.matchers.path_regexp }}
        {{- else if $route.matchers.paths }}
          path {{ join " " $route.matchers.paths }}
        {{- end }}
        {{- if $route.matchers.methods }}
          method {{ join " " $route.matchers.methods }}
        {{- end }}
        {{- if $route.matchers.headers }}
          {{- range  $header := $route.matchers.headers }}
          header {{ $header }}
          {{- end }}
        {{- end }}
        {{- if $route.matchers.expressions }}
          {{- range  $exp := $route.matchers.expressions }}
          expression {{ $exp }}
          {{- end }}
        {{- end }}
        {{- if $route.matchers.headers_regexp }}
          {{- range  $hRegex := $route.matchers.headers_regexp }}
          header_regexp {{ $hRegex }}
          {{- end }}
        {{- end }}

      }
      {{- end }}
    
      handle_path /{{ $componentName }}/api/* {
        {{- range $r := $componentRoutes }}
        handle @{{ $r.name }} {
          {{- range $d := $r.directives }}
          {{ $d }}  
          {{- end }}
        }
        {{- end }}

        handle @catchAllAPI {
          respond * 404 {
            body "Not Found"
            close
          }
        }
      }
      {{- end }}
      
      handle_path /* {
        respond * 404 {
          body "Not Found"
          close
        }
      }
    }
    
    
    
