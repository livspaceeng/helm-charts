gateway:
  nameOverride: gateway
  ## Default values for image
  image:
    repository: livcr.io/docker/haproxytech/haproxy-alpine

  ## Automatically Roll Deployments
  # ref: https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments
  checksumConfigMap:
    enabled: true

  ## Share Process Namespace between Containers in a Pod
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
  shareProcessNamespace:
    enabled: false

  ## Pods: How Pods manage multiple containers
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/#workload-resources-for-managing-pods
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/#how-pods-manage-multiple-containers
  sidecarContainers: []
  ## Deployment or DaemonSet pod mode
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
  kind: Deployment    # can be 'Deployment' or 'DaemonSet'
  replicaCount: 1   # used only for Deployment mode

  ## minReadySeconds setting of Deployment or DaemonSet
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#min-ready-seconds
  minReadySeconds: 0

  ## Command line arguments to pass to HAProxy
  args:
    enabled: true    # EE images require disabling this due to S6-overlay
    # ref: http://cbonte.github.io/haproxy-dconv/2.6/management.html#3
    defaults: ["-f", "/usr/local/etc/haproxy/haproxy.cfg"]
    extraArgs: []    # EE images require disabling this due to S6-overlay

  ## Controller Container liveness/readiness probe configuration
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 0
    timeoutSeconds: 1
    tcpSocket:
      port: 80
    periodSeconds: 10

  readinessProbe:
    failureThreshold: 3
    successThreshold: 1
    initialDelaySeconds: 0
    timeoutSeconds: 1
    tcpSocket:
      port: 80
    periodSeconds: 10

  startupProbe:
    failureThreshold: 20
    successThreshold: 1
    initialDelaySeconds: 0
    timeoutSeconds: 1
    tcpSocket:
      port: 80
    periodSeconds: 1


  ## Pod termination grace period
  ## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  terminationGracePeriodSeconds: 60

  ## Container listener port configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/
  containerPorts:   # has to match hostPorts when useHostNetwork is true
    http: 80
    https: 443
    stat: 1024

  ## Deployment strategy definition
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate

  ## Pod PriorityClass
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""

  ## Container lifecycle handlers
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
  lifecycle: {}
    ## Example preStop for graceful shutdown
    # preStop:
    #   exec:
  #     command: ["/bin/sh", "-c", "kill -USR1 $(pidof haproxy); while killall -0 haproxy; do sleep 1; done"]

  ## Additional envs to the main container
  extraEnvs: []
  ## Example passing the pod IP into a container
  # - name: POD_IP
  #   valueFrom:
  #     fieldRef:
  #       fieldPath: status.podIP

  ## Additional volumeMounts to the controller main container
  extraVolumeMounts: []
  ## Example empty volume mounts when using securityContext->readOnlyRootFilesystem
  # - name: etc-haproxy
  #   mountPath: /etc/haproxy
  # - name: tmp
  #   mountPath: /tmp
  # - name: var-state-haproxy
  #   mountPath: /var/state/haproxy

  ## Additional volumes to the controller pod
  extraVolumes: []
  ## Example empty volumes when using securityContext->readOnlyRootFilesystem
  # - name: etc-haproxy
  #   emptyDir: {}
  # - name: tmp
  #   emptyDir: {}
  # - name: var-state-haproxy
  #   emptyDir: {}

  ## HAProxy daemon configuration
  # ref: https://www.haproxy.org/download/2.6/doc/configuration.txt
  config: |
    global
      log stdout format raw local0
      maxconn 1024
  
    defaults
      log global
      timeout client 60s
      timeout connect 60s
      timeout server 60s
  
    frontend fe_main
      bind :80
      default_backend be_main
  
    backend be_main
      server web1 10.0.0.1:8080 check

  # Mount path and sub path for config file
  configMount:
    mountPath: /usr/local/etc/haproxy/haproxy.cfg    # EE images use /etc/hapee-VERSION/hapee-lb.cfg
    subPath: haproxy.cfg                             # EE images use hapee-lb.cfg

  ## Basic features : Maps
  # ref: http://cbonte.github.io/haproxy-dconv/2.6/configuration.html#7.3.1-map
  # ref: http://cbonte.github.io/haproxy-dconv/2.6/intro.html#3.3.8
  includes:
  # routes.map: |
  #   www.example.com/v1     www.example2.com/v2
  #   api.example.com/v1     api.example2.com/v2
  #   static.example.com/v1  static.example2.com/v2
  # 200.http: |
  #   HTTP/1.1 200 OK
  #   Cache-Control: no-cache
  #   Connection: close
  #   Content-Type: text/html
  #   <html><body><h1>200 OK</h1>
  #   Check passed.
  #   </body></html>

  ## Mount path for includes and maps
  includesMountPath: /usr/local/etc/haproxy/includes         # EE images use /etc/hapee-VERSION

  ## Additional secrets to mount as volumes
  ## This is expected to be an array of dictionaries specifying the volume name, secret name and mount path
  mountedSecrets: []
  #  - volumeName: ssl-certificate
  #    secretName: star-example-com
  #    mountPath: /usr/local/etc/ssl

  ## Pod Node assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  nodeSelector: {}

  ## Node Taints and Tolerations for pod-node cheduling through attraction/repelling
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node Affinity for pod-node scheduling constraints
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Topology spread constraints (only used in kind: Deployment)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: kubernetes-ingress
  #       app.kubernetes.io/instance: kubernetes-ingress

  ## Pod DNS Config
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  dnsConfig: {}

  ## Pod DNS Policy
  ## Change this to ClusterFirstWithHostNet in case you have useHostNetwork set to true
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
  dnsPolicy: ClusterFirst

  ## Additional labels to add to the pod container metadata
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels:
    owner: praveen

  ## Additional annotations to add to the pod container metadata
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  #  key: value

  ## Enable RBAC Authorization
  ## ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rbac:
    create: true

  ## Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
  #  enabled: true
  #  runAsNonRoot: true
  #  runAsUser: 1000
  #  runAsGroup: 1000
  #  allowPrivilegeEscalation: true
  #  capabilities:
  #    drop:
  #      - ALL
  #    add:
  #      - NET_BIND_SERVICE
  #  seccompProfile:
  #    type: RuntimeDefault

  ## Compute Resources
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  resources:
    limits:
    #    cpu: 250m
      memory: 256Mi
    requests:
      cpu: 150m
      memory: 128Mi

  ## Horizontal Pod Scaler
  ## Only to be used with Deployment kind
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 7
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
    # additionalMetrics:
    #   - type: Object
    #     object:
    #       metric:
    #         name: requests-per-second
    #       describedObject:
    #         apiVersion: networking.k8s.io/v1
    #         kind: Ingress
    #         name: main-route
    #       target:
    #         type: Value
    #         value: 10k

  ## Pod Disruption Budget
  ## Only to be used with Deployment kind
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  PodDisruptionBudget:
    enable: false
    # maxUnavailable: 1
    # minAvailable: 1

  ## Service configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    type: ClusterIP   # can be 'LoadBalancer'

    ## Service ClusterIP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
    clusterIP: ""

    ## LoadBalancer IP
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    loadBalancerIP: ""

    ## Source IP ranges permitted to access Network Load Balancer
    # ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    loadBalancerSourceRanges: []

    ## Service ExternalIPs
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
    externalIPs: []

    ## Service annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: {}

    ## Service externalTrafficPolicy
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-traffic-policy
    # externalTrafficPolicy: Cluster

    ## Service internalTrafficPolicy
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/
    # internalTrafficPolicy: Cluster

    ## Additional Service ports to use(e.g. port of side container haproxy exporter)
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
    additionalPorts: {}
    # prometheus: 9101

  serviceMonitor:
    ## Toggle the ServiceMonitor true if you have Prometheus Operator installed and configured
    enabled: false

    ## Specify the labels to add to the ServiceMonitors to be selected for target discovery
    extraLabels: {}

    ## Specify the endpoints
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md#servicemonitor
    endpoints:
      - port: prometheus
        path: /metrics
        scheme: http
        interval: 30s
