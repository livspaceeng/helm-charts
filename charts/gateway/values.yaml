nameOverride: "gateway"
# -- Number of replicas for the Deployment
replicas: 1

# -- HorizontalPodAutoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

# -- Deployment strategy. See `kubectl explain deployment.spec.strategy` for more,
# ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 15%
serviceAccount:
  # -- Whether to create a service account or not. In case 'create' is false, do set 'name' to an existing service account name.
  create: true
  # -- Override for the generated service account name.
  name:
  annotations: {}
  labels: {}
# -- The name of the PriorityClass
priorityClassName: null
# -- Labels for Deployment Pods
podLabels: {}
# -- Annotations Deployment Pods
podAnnotations: {}
# -- PodDisruptionBudget https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
  enabled: false
  maxUnavailable: 1
# -- Additional CLI args for the container
extraArgs: {}
# -- Environment variables to add to the Pods. https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
env: []
# -- Environment variables from secrets or configmaps to add to the Pods.
extraEnvFrom: []
# -- Jaeger reporter queue size
# Set to 'null' to use the Jaeger client's default value
jaegerReporterMaxQueueSize: null
# -- Volumes to add to the Pods
extraVolumes: []
# -- Volume mounts to add to the Pods
extraVolumeMounts: []
# -- Additional containers to be added to the Pods.
extraContainers: []
# - name: dnsmasq
#   image: "janeczku/go-dnsmasq:release-1.0.7"
#   imagePullPolicy: IfNotPresent
#   args:
#     - --listen
#     - "127.0.0.1:8053"
#     - --hostsfile=/etc/hosts
#     - --enable-search
#     - --verbose

# -- Init containers https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
initContainers: []

# -- SecurityContext override for gateway pods
securityContext: {}
# -- The SecurityContext for gateway containers
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: [ALL]

# -- Resource requests and limits for the container
resources: {}
# -- Grace period to allow the gateway container to shut down before it is killed
terminationGracePeriodSeconds: 30

affinity: {}

# -- topologySpreadConstraints allows to customize the default topologySpreadConstraints. This can be either a single dict as shown below or a slice of topologySpreadConstraints.
# labelSelector is taken from the constraint itself (if it exists) or is generated by the chart using the same selectors as for services.
topologySpreadConstraints:
  maxSkew: 1
  topologyKey: kubernetes.io/hostname
  whenUnsatisfiable: ScheduleAnyway

# Annotations for the Deployment
annotations: {}

podSecurityContext:
  fsGroup: 101
  runAsGroup: 101
  runAsNonRoot: true
  runAsUser: 101

# -- Node selector for Deployment Pods
nodeSelector: {}
# -- Tolerations for Deployment Pods
tolerations: []
# -- Gateway Service configuration
service:
  # -- Port on which the Service listens
  port: 80
  # -- Type of the Service
  type: ClusterIP
  # -- ClusterIP of the Service
  clusterIP: null
  # -- Node port if service type is NodePort
  nodePort: null
  # -- Load balancer IP address if service type is LoadBalancer
  loadBalancerIP: null
  # -- Annotations for the Service
  annotations: {}
  # -- Labels for the Service
  labels: {}
  # -- DEPRECATED Legacy compatibility port the GEM gateway service listens on, set to 'null' to disable
  legacyPort: 8080
  nameOverride: ""

readinessProbe:
  httpGet:
    path: /ready
    port: http-metrics
  initialDelaySeconds: 15
  timeoutSeconds: 1

nginx:
  # -- Enable logging of 2xx and 3xx HTTP requests
  verboseLogging: true

  # -- Image for the nginx. pullPolicy and optional pullSecrets are set in toplevel 'image' section, not here.
  image:
    # -- The Docker registry for nginx image
    registry: livcr.io/docker
    # -- The nginx image repository
    repository: nginxinc/nginx-unprivileged
    # -- The nginx image tag
    tag: 1.25-alpine

  config:
    # -- NGINX log format
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    # -- Sets the log level of the NGINX error log. One of `debug`, `info`, `notice`, `warn`, `error`, `crit`, `alert`, or `emerg`
    errorLogLevel: error
    # -- Enables NGINX access logs
    accessLogEnabled: true
    # -- Allows appending custom configuration to the server block
    serverSnippet: ""
    # -- Allows appending custom configuration to the http block
    httpSnippet: ""
    # -- Allows to set a custom resolver
    resolver: kube-dns.kube-system.svc.cluster.local.
    # -- Configures whether or not NGINX bind IPv6
    enableIPv6: true
    # -- Config file contents for Nginx. Passed through the `tpl` function to allow templating.

    upstreams: {}
#      bouncer: https://bouncer
#      hydra: https://hydra

    locations:
      "/":
        - return 404 'OK';
      "= /ready":
        - return 200 'OK';
        - access_log off;

    file: |
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr {{ .Values.nginx.config.errorLogLevel }};
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        default_type application/octet-stream;
        log_format   {{ .Values.nginx.config.logFormat }}

        {{- if .Values.nginx.verboseLogging }}
        access_log   /dev/stderr  main;
        {{- else }}

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   {{ .Values.nginx.config.accessLogEnabled | ternary "/dev/stderr  main  if=$loggable;" "off;" }}
        {{- end }}

        sendfile           on;
        tcp_nopush         on;
        proxy_http_version 1.1;

        {{- if .Values.nginx.config.resolver }}
        resolver {{ .Values.nginx.config.resolver }};
        {{- end }}

        {{- with .Values.nginx.config.httpSnippet }}
        {{ . | nindent 2 }}
        {{- end }}

        proxy_read_timeout 300;
        server {
          listen {{ include "gateway.serverHttpListenPort" . }};
          {{- if .Values.nginx.config.enableIPv6 }}
          listen [::]:{{ include "gateway.serverHttpListenPort" . }};
          {{- end }}
          
          {{- range $k, $v := .Values.nginx.config.upstreams }}
          upstream {{$k}} {
            server {{$v}};
          }
          {{- end }}
      
          {{- range $k, $v := .Values.nginx.config.locations }}
          location {{$k}} {
          {{- range $d := $v }}
            {{ . | toString -}}
          {{- end }}
          }
          {{- end }}
          
          {{- with .Values.nginx.config.serverSnippet }}
          {{ . | nindent 4 }}
          {{- end }}
        }
      }
